// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put your code here:


Not16(in=x, out=notx);                                  //Not x
And16(a=notx, b=x, out=zerox);                          //Zero x

Not16(in=y, out=noty);                                  //Not y
And16(a=noty, b=y, out=zeroy);                          //Zero y

Mux16(a=x, b=zerox, sel=zx, out=loworx);                 //Select zero or x
Mux16(a=y, b=zeroy, sel=zy, out=lowory);                 //Select zero or y

Not16(in=loworx, out=flippedx);                         
Not16(in=lowory, out=flippedy);

Mux16(a=loworx, b=flippedx, sel=nx, out=xin);           //Select x or not x
Mux16(a=lowory, b=flippedy, sel=ny, out=yin);           //Select y or not y

Add16(a=xin, b=yin, out=xaddy);                         //Add x and y
And16(a=xin, b=yin, out=xandy);                         //Bitwise x and y
Mux16(a=xandy, b=xaddy, sel=f, out=fout);               //Select x+y or x&y

Not16(in=fout, out=nfout);                              //Negate out
Mux16(a=fout, b=nfout, sel=no, out=kout, out[15]=msb);   //Select out or negate out
Or16(a=kout, b=kout, out=out);

And16(a=kout, b=kout, out[0..7]=zr1);
And16(a=kout, b=kout, out[8..15]=zr2);

Or8Way(in=zr1, out=z1);                             
Or8Way(in=zr2, out=z2);
Or(a=z1, b=z2, out=zr3);
Not(in=zr3, out=zr);

And(a=msb, b=true, out=ng);                             

}